import gradio as gr
import cv2
import numpy as np
from PIL import Image
from ultralytics import YOLO
import matplotlib.pyplot as plt

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —à–ª—è—Ö –∞–±–æ –Ω–∞–∑–≤—É)
model = YOLO("/content/best.pt")

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—É —Ö—Ä–µ–±—Ç–∞
def plot_spine_profile(spine_points):
    x_vals = [p[0] for p in spine_points]
    y_vals = [p[1] for p in spine_points]

    fig, ax = plt.subplots()
    ax.plot(x_vals, y_vals, 'bo-', linewidth=2)
    ax.set_title('–ü—Ä–æ—Ñ—ñ–ª—å —Ö—Ä–µ–±—Ç–∞')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')

    ax.set_aspect('equal')  # –ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
    ax.invert_yaxis()       # –©–æ–± "–≤–µ—Ä—Ö" –±—É–≤ –≤–≥–æ—Ä—ñ, —è–∫ —É —Ñ–æ—Ç–æ
    ax.grid(True)

    return fig

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—ó –æ—Ü—ñ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤–∏
def analyze_posture(spine_points):
    cervical, thoracic, lumbar, sacral = spine_points
    angles = []
    for i in range(len(spine_points) - 2):
        a, b, c = spine_points[i], spine_points[i + 1], spine_points[i + 2]
        ba = np.array([a[0] - b[0], a[1] - b[1]])
        bc = np.array([c[0] - b[0], c[1] - b[1]])
        cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc))
        angle = np.degrees(np.arccos(np.clip(cosine_angle, -1.0, 1.0)))
        angles.append(angle)

    if all(160 <= angle <= 180 for angle in angles):
        return "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–Ω—è —Ö—Ä–µ–±—Ç–∞ –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏."
    else:
        return f"‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–µ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è. –í–∏–º—ñ—Ä—è–Ω—ñ –∫—É—Ç–∏: {', '.join(f'{a:.1f}¬∞' for a in angles)}"

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
def yolo_posture_analysis(pil_img, view_angle, model_version):
    image = np.array(pil_img)
    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    results = model(image_bgr)
    keypoints = results[0].keypoints.xy if len(results) > 0 else None

    if keypoints is not None and keypoints.numel() > 0:
        kpts = keypoints[0].tolist()

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—ñ 4 —Ç–æ—á–∫–∏ —è–∫ —Ö—Ä–µ–±–µ—Ç (–ø—ñ–¥–ª–∞—à—Ç—É–π –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é)
        cervical = kpts[0]
        thoracic = kpts[1]
        lumbar = kpts[2]
        sacral = kpts[3]
        spine_points = [cervical, thoracic, lumbar, sacral]

        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
        for point in spine_points:
            x, y = int(point[0]), int(point[1])
            cv2.circle(image_bgr, (x, y), 5, (0, 0, 255), -1)
        for i in range(len(spine_points) - 1):
            cv2.line(image_bgr, tuple(map(int, spine_points[i])), tuple(map(int, spine_points[i + 1])), (255, 0, 0), 2)

        analyzed_image = Image.fromarray(cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB))
        diagnosis = analyze_posture(spine_points)
        spine_plot = plot_spine_profile(spine_points)

        return analyzed_image, f"[{model_version}] ({view_angle}):\n{diagnosis}", spine_plot
    else:
        return pil_img, f"[{model_version}] ({view_angle}): –û—Å—ñ–± –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.", plt.figure()

# –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
def load_example_image(index):
    example_paths = ["example_back.jpg", "example_side.jpg"]
    return Image.open(example_paths[index])

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—à–µ–Ω—å –ø–æ—Å—Ç–∞–≤–∏ –ª—é–¥–∏–Ω–∏ –∑–∞ —Ñ–æ—Ç–æ")

    with gr.Row():
        with gr.Column():
            input_image = gr.Image(type="pil", label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –æ–±—Ä–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥")

            with gr.Row():
                example_btn_1 = gr.Button("üì∏ –ü—Ä–∏–∫–ª–∞–¥: —Å–ø–µ—Ä–µ–¥—É")
                example_btn_2 = gr.Button("üì∏ –ü—Ä–∏–∫–ª–∞–¥: –∑–±–æ–∫—É")

            view_selector = gr.Radio(["–≤–∏–≥–ª—è–¥ –∑–∑–∞–¥—É", "–≤–∏–≥–ª—è–¥ –∑–±–æ–∫—É"], label="–ö—É—Ç –æ–≥–ª—è–¥—É", value="–≤–∏–≥–ª—è–¥ –∑–∑–∞–¥—É")
            model_selector = gr.Dropdown(["yolo11s-pose20Ep", "yolo11s-pose50Ep", "yolo11s-pose100Ep"],
                                         label="–í–µ—Ä—Å—ñ—è –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ", value="yolo11s-pose100Ep")

            analyze_btn = gr.Button("–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤—É")

        with gr.Column():
            output_image = gr.Image(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É")
            result_text = gr.Textbox(label="–û—Ü—ñ–Ω–∫–∞", interactive=False)
            output_plot = gr.Plot(label="–ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ—Ñ—ñ–ª—é —Ö—Ä–µ–±—Ç–∞")

    # –ü–æ–¥—ñ—ó
    example_btn_1.click(fn=lambda: load_example_image(0), outputs=input_image)
    example_btn_2.click(fn=lambda: load_example_image(1), outputs=input_image)

    analyze_btn.click(
        fn=yolo_posture_analysis,
        inputs=[input_image, view_selector, model_selector],
        outputs=[output_image, result_text, output_plot]
    )

demo.launch()
